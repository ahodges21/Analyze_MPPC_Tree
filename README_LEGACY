This software is designed to analyze the data from the TTree that is output from the CAEN DT5702. 
sPHENIX Hadronic calorimeter tiles respond to cosmic hits, and the data is readout via SiPM's to the unit.

The file contains, as of now, 6 functions, that are used jointly to analyze the data:

TH1F *makeUniTree(string f, int mode = 0, int iscalib, int angle)
Primary function that reads root file and analyzes ttree

f - input root file

mode - parameter signifies how the performance ratio is calculated:
0 - do not calculate, simply draw histograms
1 - Forgot to make this do something
2 - Performance = MPV_Tile/MPV_Ref -> Used for when there's one reference tile
3 - Performance = MPV_Tile/<MPV_Test> -> Used for when there is no reference tile (early Uniplast data)
4 - Performance = MPV_Tile/<MPV_Refs> -> For newest GSU tests involving two reference tiles

iscalib - creates files necessary to calculate position/correct based calibration factors
0 - do not create calibration files (use if you just want to draw or the factors have already been made)
1 - do create calibration files (use if doing a first pass of new data with no calibration info)

angle - the angle of the tile (e.g. 21), used to fetch correction factors. 

float extractPerfRat(char* filelist, int mode)
This function extracts the tile best suited to being a new reference tile

filelist - list of files associated with the tests of a particular angle

mode - see above under makeUniTree

void makeRunningDists(char *filelist, int mode, char* outname, int angle, int iscalib = 0)
Runs makeUniTree over a list of files specified by filelist

filelist - list of files to be analyzed

mode - Set to whatever mode you want makeUniTree run in

outname - output file name

float extractSBR(TH1F *histin)

Currently untested. Meant to integrate pedestal and Landau distribution to extract signal to background ratio. 

int countLines(char *filelist)

Simply counts the number of lines in a given file. Used to set limits on for loops.

filelist - list of files to be analyzed

void superImpose(int start, char* globalname = "", char* bd = "")

Looks for files created by makeRunningDists starting with "start" variable, then plots the next four 
angle types after it. E.g., if you give it 5, it'll start with b25 and go to b29

numSec - number of HCal eta angles being analyzed. 

globalname - name of file containing global distribution of tile performances, set to 0 if you don't want the global distribution drawn

bd - prefix on files containing histogram for individual tile angle.

void makePositDep(char *filelist, int setup, int angle)
Makes plot of performance ratio versus SiPM position and averages each position to calculate correction factor

angle - tile angle

filelist - list of files associated with one tile angle

setup - setup of CAEN unit

fileNum - number of files associated with test, used to determine array size, so has to be set as const

void makeCalFiles(char *filelist, int mode) - Deprecated, can be done by makeRunningDists
Makes calibration files to be fed to makePostDep

filelist - list of files to be analyzed

mode - analysis mode to be fed to makeUniTree

float getCorrFactor(int chan, int setup, int angle)
Returns correction factor determined via the per-channel, per-angle calibration process

chan - channel number

setup - Physical test setup

angle - tile angle 

buildGlobalDist.C

void buildGlobalDist()
This function reads in a bunch of .txt files that contain a breakdown of the tile tester data by tile angle. 
In order to get it setup, in the same directory as the macro, you need to create the following paths:

excelLists
excelLists/plots

In the excelLists/ directory create a file for each tile angle with the following form: "B##excel.txt". 
So ## goes from 21 to 32. 

Then all you need to do is copy and paste the GSU PR values from the database into each of the .txt files. 
Be sure to do this carefully, of course. 

Then:

> root -l
> .L buildGlobalDist.C
> buildGlobalDist()
> .q

You might as well just quit root because for some reason, saving to an output file whipes everything from any open 
convasses. Anyways, you'll get the following from the macro:

1) Plots of the PR values for each tile angle and the global distribution will be placed in excelLists/plots
2) A root file containing all the histograms will also be created with the name Master_Output_yyyymmdd.root

void ShipmentComp(int angle, const int nShips)

This function does the same basic thing as buildGlobalDist does above, but does so on a finer basis. 

angle - the integer representing the tile type (e.g. B25 -> 25)

nShips - current number of shipments we have received (5 at time of writing 06/20/19)

Directory structure:

excelLists/shipmentBreakdown/B##/ You'll need a directory for each tile type. 
The macro is going to look for PR lists of the form B##_#.txt, where the third # designates the shipment number. 
The easiest way to fill these lists right now is to download a static version of the database, go to each tile angle, 
sort it by shipment number, and then just copy and paste it into the list. A little tedious, admittedly. 

To run:

>root -l
>.L buildGlobalDist.C
>ShipmentComp(21,5)

This should show you all the B21 PR's broken down by shipment number. 
